#Вычислить сумму знакопеременного ряда |х(2n)|/(2n)!, где х-матрица ранга к (к и матрица задаются случайным образом), n - номер слагаемого. Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой. У алгоритма д.б. линейная сложность. Знак первого слагаемого  -.
import numpy as np


from decimal import Decimal, getcontext
from math import factorial

# Функция для вычисления суммы ряда
def compute_series_sum(x, k, t):
    # Проверка на положительность точности
    if t <= 0:
        print("Ошибка: Точность t должна быть положительным числом.")
        return None

    # Вычисление нормы матрицы x
    norm_x = np.linalg.norm(x)

    n = 0
    factorial_val = 1
    epsilon = 10**(-t)

    # Начальное значение суммы
    sum_result = -norm_x**(2*n) / factorial_val

    while True:
        n += 1

        # Обновление значения факториала
        factorial_val *= (2*n)*(2*n-1)

        # Вычисление текущего слагаемого
        current_term = norm_x**(2*n) / factorial_val

        # Обновление суммы с учетом знака
        sum_result += ((-1)**n) * current_term

        # Проверка условия завершения
        if abs(current_term) < epsilon:
            break

    # Форматирование строки с желаемой точностью
    result_str = "{:.{prec}f}".format(sum_result, prec=t)
    return float(result_str)

# Ввод данных с клавиатуры и вычисление суммы ряда
try:
    x = np.random.rand(3, 3)
    k = 3
    t = int(input("Введите желаемую точность t: "))  # Ввод значения t с клавиатуры
    if t <= 0:
        print("Ошибка: Точность t должна быть положительным числом.")
    else:
        result = compute_series_sum(x, k, t)
        if result is not None:
            print(f"Сумма ряда: {result}")
except ValueError:
    print("Ошибка: Пожалуйста, введите целое число для точности t.")
except KeyboardInterrupt:
    print("\nПрограмма прервана пользователем.")
